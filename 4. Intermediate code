assembly_code = [
    "START 100",
    "READ A",
    "READ B",
    "MOVER AREG, A",
    "SUB AREG, B",
    "STOP",
    "A DS 1",
    "B DS 1",
    "END"
]

# Opcode and register tables
opcode_table = {
    'STOP': ('IS', '00'),
    'ADD': ('IS', '01'),
    'SUB': ('IS', '05'),
    'MOVER': ('IS', '04'),
    'MOVEM': ('IS', '05'),
    'READ': ('IS', '09'),
    'PRINT': ('IS', '10'),
    'START': ('AD', '01'),
    'END': ('AD', '02'),
    'DS': ('DL', '01'),
    'DC': ('DL', '02')
}

register_table = {
    'AREG': '1',
    'BREG': '2',
    'CREG': '3',
    'DREG': '4'
}

symbol_table = {}
symbol_index = 1
intermediate_code = []
location_counter = 0

for line in assembly_code:
    tokens = line.strip().split()

    if not tokens:
        continue

    if tokens[0] == 'START':
        location_counter = int(tokens[1])
        intermediate_code.append(f"(AD,01) (C,{tokens[1]})")
        continue

    if tokens[0] == 'END':
        intermediate_code.append(f"(AD,02)")
        break

    # Handle symbol definitions (e.g., A DS 1)
    if len(tokens) == 3 and tokens[1] == 'DS':
        symbol = tokens[0]
        if symbol not in symbol_table:
            symbol_table[symbol] = symbol_index
            symbol_index += 1
        intermediate_code.append(f"(DL,01) (C,{tokens[2]})")
        location_counter += 1
        continue

    # Handle single operand instructions (READ, PRINT, etc.)
    if tokens[0] in ['READ', 'PRINT']:
        mnemonic = tokens[0]
        operand = tokens[1]
        if operand not in symbol_table:
            symbol_table[operand] = symbol_index
            symbol_index += 1
        op_type, op_code = opcode_table[mnemonic]
        intermediate_code.append(f"({op_type},{op_code}) (S,{symbol_table[operand]})")
        location_counter += 1
        continue

    # Handle instructions like: MOVER AREG, A or SUB AREG, B
    if tokens[0] in opcode_table:
        mnemonic = tokens[0]
        if len(tokens) >= 3:
            reg = tokens[1].replace(',', '')
            operand = tokens[2]
            if operand not in symbol_table:
                symbol_table[operand] = symbol_index
                symbol_index += 1
            op_type, op_code = opcode_table[mnemonic]
            intermediate_code.append(f"({op_type},{op_code}) ({register_table[reg]}) (S,{symbol_table[operand]})")
        else:
            # Example: STOP
            op_type, op_code = opcode_table[mnemonic]
            intermediate_code.append(f"({op_type},{op_code})")
        location_counter += 1
        continue

# âœ… Output
print("Intermediate Code:")
for line in intermediate_code:
    print(line)
