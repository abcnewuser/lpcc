%{
#include "y.tab.h"
#include <string.h>
#include <stdlib.h>
%}

%%

[ \t]+                  ; // ignore whitespace

[a-zA-Z_][a-zA-Z0-9_]*  {
    if (strcmp(yytext, "sqrt") == 0) return SQRT;
    if (strcmp(yytext, "strlen") == 0) return STRLEN;
    yylval.str = strdup(yytext);
    return ID;
}

[0-9]+(\.[0-9]+)?       {
    yylval.fval = atof(yytext);
    return NUM;
}

\"[^\"]*\"              {
    yytext[yyleng - 1] = '\0';
    yylval.str = strdup(yytext + 1);
    return STRING;
}

"="                     { return '='; }
"("                     { return '('; }
")"                     { return ')'; }
\n                      { return '\n'; }
.                       { return yytext[0]; }

%%


yacc:- 

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int yylex();
int yyerror(const char *s);
%}

%union {
    float fval;
    char *str;
}

%token <fval> NUM
%token <str> ID STRING
%token SQRT STRLEN

%%

input:
    statement '\n' { }
    ;

statement:
    ID '=' expr {
        printf("%s = %.2f\n", $1, $3);
        free($1);
    }
    ;

expr:
    SQRT '(' expr ')' {
        $$ = sqrt($3);
    }
    | STRLEN '(' STRING ')' {
        $$ = strlen($3);
        free($3);
    }
    | NUM {
        $$ = $1;
    }
    ;

%%

int main() {
    printf("Enter expression (e.g., u = sqrt(36)):\n");
    return yyparse();
}

int yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 1;
}


yacc -d builtin.y
lex builtin.l
gcc y.tab.c lex.yy.c -lm -o builtins
./builtins
