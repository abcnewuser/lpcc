lex:- 
%{
#include "y.tab.h"
%}

%%

[0-9]+(\.[0-9]+)?    { yylval.fval = atof(yytext); return NUM; }
[\n]                 { return '\n'; }
"+"                  { return '+'; }
"-"                  { return '-'; }
"*"                  { return '*'; }
"/"                  { return '/'; }
"("                  { return '('; }
")"                  { return ')'; }
[ \t]                { /* skip whitespace */ }

.                    { printf("Invalid character: %s\n", yytext); }

%%

yacc:- 
%{
#include <stdio.h>
#include <stdlib.h>
%}

%union {
    float fval;
}

%token <fval> NUM
%left '+' '-'
%left '*' '/'
%type <fval> expr

%%

input:
    expr '\n'   { printf("Result: %.2f\n", $1); }
    ;

expr:
    expr '+' expr   { $$ = $1 + $3; }
    | expr '-' expr { $$ = $1 - $3; }
    | expr '*' expr { $$ = $1 * $3; }
    | expr '/' expr { $$ = $1 / $3; }
    | '(' expr ')'  { $$ = $2; }
    | NUM           { $$ = $1; }
    ;

%%

int main() {
    printf("Enter expression: ");
    return yyparse();
}

int yyerror(const char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
    return 0;
}

yacc -d expr.y
lex expr.l
gcc lex.yy.c y.tab.c -o calc -lm
./calc

